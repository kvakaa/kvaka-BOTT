require('dotenv').config();
const { 
    Bot,
     GrammyError, 
     HttpError, 
     Keyboard,
      InlineKeyboard 
    } = require('grammy');
    const {hydrate} = require('@grammyjs/hydrate')

const bot = new Bot (process.env.BOT_API_KEY);
bot.use(hydrate());

bot.api.setMyCommands([
    {
        command: 'start', 
        description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞',
    },
    {
        command: 'mood',
        description: '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?'
    },
    {
        command: 'share',
        description: '–ü–æ–¥–µ–ª–∏—Å—å —á–µ–º –Ω–∏–±—É–¥—å:'
    },
    {
        command: 'inline_keyboard',
        description: '–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞'
    },
    {
        command: 'menu',
        description: '–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é'
    }
]);


bot.command('start', async (ctx) => {
    await ctx.react('üçå')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç\\! —è \\- –±–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞: [–∫–ª–∏–∫](https://t.me/pornoleha)', {
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: true
    });
});

const menuKeyboard = new InlineKeyboard()
.text('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —à–ª—é—Ö–∏', 'order-status')
.text('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –µ–±–∞–Ω—É—é —Ç–µ—Ö–ø–æ–¥–¥—Ä–µ–∂–∫—É', 'support')

const backKeyboard = new InlineKeyboard().text('< –ù–∞–∑–∞–¥ –≤ —É—Ç—Ä–æ–±—É', 'back');

bot.command('menu', async (ctx) => {
await ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
    reply_markup: menuKeyboard,
    });
});
    // –º–µ—Ç–æ–¥ hydrate //
bot.callbackQuery('order-status', async (ctx) => {
    await ctx.callbackQuery.message.editText('–°—Ç–∞—Ç—É—Å —à–ª—é—Ö–∏: –µ–¥–µ—Ç –±—É—Ö–∞—è', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery('support', async (ctx) => {
    await ctx.callbackQuery.message.editText('–ü–æ–ø–ª–∞—á—å—Å—è, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ —Ç–∞–∫ –ø–ª–æ—Ö–æ', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
})

bot.callbackQuery('back', async (ctx) => {
    await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
        reply_markup: menuKeyboard,
    });
    await ctx.answerCallbackQuery();
})

    //–¥—Ä—É–≥–∏–µ –∫–æ–º–º–∞–Ω–¥—ã//

bot.command("mood", async (ctx) => {
    // const moodKeyboard = new Keyboard().text('–•–æ—Ä–æ—à–æ').row().text('–ù–æ—Ä–º').row().text('–•—É–µ–≤–æ')
    // .resized()

    const moodLabels = ['–•–æ—Ä–æ—à–æ','–ü–æ–π–¥–µ—Ç','–ü–ª–æ—Ö–æ–≤–∞—Å—Ç–µ–Ω—å–∫–æ']
    const rows = moodLabels.map((label) => {
        return [
            Keyboard.text(label)
        ]
    })
    const moodKeyboard2 = Keyboard.from(rows).resized()

    await ctx.reply('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
        reply_markup: moodKeyboard2
    })
})

bot.command('share', async (ctx) => {
    const shareKeyboard = new Keyboard().requestLocation('–ì–µ–æ').requestContact('–ö–æ–Ω—Ç–∞–∫—Ç')
    .requestPoll('–û–ø—Ä–æ—Å').placeholder('–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...').resized()

    await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
        reply_markup: shareKeyboard
    })
    
})

bot.command('inline_keyboard', async (ctx) => {
// const inlineKeyboard = new InlineKeyboard()
//     .text('1', 'button-1')
//     .text('2', 'button-2')
//     .text('3', 'button-3');
    const inlineKeyboard2 = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª','https://t.me/pornoleha')
    await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', {
        reply_markup: inlineKeyboard2
    })
})

bot.on(':contact', async (ctx) => {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)))')
       
})



bot.hears('–•–æ—Ä–æ—à–æ', async (ctx) => {
     await ctx.reply('–ö–ª–∞—Å—Å!', {
        reply_markup: {remove_keyboard: true}
     })
});

bot.hears('–ü–æ–π–¥–µ—Ç', async (ctx) => {
    await ctx.reply('–ë–µ–¥–Ω–∏', {
       reply_markup: {remove_keyboard: true}
    })
});

bot.hears('–ü–ª–æ—Ö–æ–≤–∞—Å—Ç–µ–Ω—å–∫–æ', async (ctx) => {
    await ctx.reply('–ò–¥–∏ –ø–æ–∫–∞–∫–∞–π, –≤—Å–µ –ø—Ä–æ–π–¥–µ—Ç', {
       reply_markup: {remove_keyboard: true}
    })
});

// bot.command(['say_hello', 'hello',  'say_hi' ], async (ctx) =>{
// await ctx.reply('Hello!')
// });


bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram", e);
    } else {
        console.error("Unknown error", e);
    }
})

bot.start();